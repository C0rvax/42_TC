/*
** Initialize mlx.
**
** @return	void*	the mlx instance
*/
void	*mlx_init();

Initializes the MLX library. Must be called before ANY other function.
Will return NULL if initialization failed.


/*
** Create a new window.
**
** @param	void *mlx_ptr	the mlx instance pointer;
** @param	int  size_x		the width of the window;
** @param	int  size_y		the height of the window;
** @param	char *title		the title of the window;
** @return	void*			the window instance pointer.
*/
void	*mlx_new_window(void *mlx_ptr, int size_x, int size_y, char *title);

Creates a new window instance. It will return a window instance pointer.
This should be saved for future reference.


/*
** Destroy a window instance.
**
** @param	void *mlx_ptr	the mlx instance;
** @param	void *win_ptr	the window instance;
** @return	int				has no return value (bc).
*/
int		mlx_destroy_window(void *mlx_ptr, void *win_ptr);

Destroys a window instance accordingly.


/*
** Put an image to the given window.
**
** @param	void *mlx_ptr	the mlx instance;
** @param	void *win_ptr	the window instance;
** @param	int  x			the x location of where the image ought to be placed;
** @param	int  y			the y location of where the image ought to be placed;
** @return	int				has no return value (bc).
*/
int		mlx_put_image_to_window(void *mlx_ptr, void *win_ptr, void *img_ptr, int x, int y);

Puts an image to the given window instance at location (x,y). This is the 
recommended way to write large amounts of graphical data in one go.
Do mind that when changing the memory of the locations, it will be displayed 
directly on the window.


/*
** Destroy an image instance.
**
** @param	void *mlx_ptr	the mlx instance;
** @param	void *img_ptr	the image instance;
** @return	int				has no return value (bc).
*/
int		mlx_destroy_image(void *mlx_ptr, void *img_ptr);

Destroys an image instance accordingly.


/*
** Hook into each loop.
**
** @param	void *mlx_ptr	the mlx instance;
** @param	int  (*f)()		the handler function, will be called as follows:
**							(*f)(void *param);
** @param	void *param		the parameter to give on each event;
** @return	int				has no return value (bc).
*/
int		mlx_loop_hook(void *mlx_ptr, int (*f)(), void *param);

Hook into the loop.


/*
** Loop over the given mlx pointer.
**
** @param	void *mlx_ptr	the mlx instance;
** @return	int				has no return value (bc).
*/
int		mlx_loop(void *mlx_ptr);

Loop over the given MLX pointer. Each hook that was registered prior to this 
will be called accordingly by order of registration.


/*
** Convert an xpm file to a new image instance.
**
** @param	void *mlx_ptr	the mlx instance;
** @param	char *filename	the file to load;
** @param	int  *width		a pointer to where the width ought to be written;
** @param	int  *height	a pointer to where the height ought to be written;
** @return	void*			the image instance, and NULL in case of error.
*/
void	*mlx_xpm_file_to_image(void *mlx_ptr, char *filename, int *width, int *height);

Converts an xpm file to a new image instance.

